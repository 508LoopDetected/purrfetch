#!/bin/bash
#                          __      _       _     
#   _ __  _   _ _ __ _ __ / _| ___| |_ ___| |__  
#  | '_ \| | | | '__| '__| |_ / _ \ __/ __| '_ \ 
#  | |_) | |_| | |  | |  |  _|  __/ || (__| | | |
#  | .__/ \__,_|_|  |_|  |_|  \___|\__\___|_| |_|
#  |_|                                           
#
#  v1.0.0
#  author: Michael Milstead
#  github: 508LoopDetected/purrfetch
#  ______________________________________________

VERSION="1.0.0"

# Display version info if -v or --version is provided
if [[ "$1" == "--version" ]] || [[ "$1" == "-v" ]]; then
    echo -e "purrfetch v$VERSION"
    exit 0
fi

# first, clear shell
clear;
echo -e '';

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Get system information
get_local_ip() {
    ip -4 addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v '127.0.0.1' | head -n 1
}

get_public_ip() {
    curl -s ifconfig.me
}

get_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "$NAME"
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        echo "$DISTRIB_ID"
    else
        echo "Unknown Distribution"
    fi
}

get_terminal() {
    if [ -n "$KITTY_WINDOW_ID" ]; then
        echo "kitty"
    elif [ -n "$TERM_PROGRAM" ]; then
        echo "$TERM_PROGRAM"
    elif [ -n "$VTE_VERSION" ]; then
        echo "gnome-terminal"
    else
        local parent=$(ps -o comm= -p "$PPID")
        case ${parent} in
            *kitty*) echo "kitty";;
            *konsole*) echo "konsole";;
            *alacritty*) echo "alacritty";;
            *terminator*) echo "terminator";;
            *urxvt*) echo "urxvt";;
            *xterm*) echo "xterm";;
            *) echo "$parent";;
        esac
    fi
}

format_uptime() {
    local uptime=$(cat /proc/uptime)
    local uptime_seconds=${uptime%%.*}
    local days=$((uptime_seconds/86400))
    local hours=$(((uptime_seconds%86400)/3600))
    local minutes=$(((uptime_seconds%3600)/60))
    
    local result=""
    [[ $days -gt 0 ]] && result="${days}d "
    [[ $hours -gt 0 ]] && result="${result}${hours}h "
    [[ $minutes -gt 0 ]] && result="${result}${minutes}m"
    
    echo "$result"
}

# Arrays for ASCII + info
declare -a ascii_art
declare -a info

# Store ASCII
readarray -t ascii_art << "EOF"
             ／＞　 フ
            | 　_　_| 
          ／` ミ＿xノ 
         /　　　　 |
        /　 ヽ　　 ﾉ
        │　　|　| |
    ／￣_乀＿|  | |
    |  (＿   ＼＿)_)
     ＼＿＿)  v1.0.0
EOF

# Store system information
info[0]="${RED}  hello${NC}    $(whoami) ${RED}@${NC} $(hostname)"
info[1]="  ${YELLOW}  distro${NC}   $(get_distro)"
info[2]="${GREEN}  shell${NC}    $(basename $SHELL) ${GREEN}+${NC} $(get_terminal)"
info[3]="${CYAN}  uptime${NC}   $(format_uptime)"
info[4]="${BLUE}  disk${NC}     $(df -h / | awk 'NR==2 {print $3}') ${BLUE}/${NC} $(df -h / | awk 'NR==2 {print $2 " (" $5 ")"}')"
info[5]=" ${MAGENTA}󰩠  local${NC}    $(get_local_ip)"
# info[6]="${BLUE}󰩟  public${NC}   $(get_public_ip)"
info[6]=""
info[7]=" 󰏘  colors   ${RED}▨${NC} ${YELLOW}▨${NC} ${GREEN}▨${NC} ${CYAN}▨${NC} ${BLUE}▨${NC} ${MAGENTA}▨ ${NC}"

# Find the longest line in ASCII art for padding
max_ascii_length=0
for line in "${ascii_art[@]}"; do
    (( ${#line} > max_ascii_length )) && max_ascii_length=${#line}
done

# Print ASCII art and info side by side
for i in "${!ascii_art[@]}"; do
    printf "%s" "${ascii_art[$i]}"
    printf "%*s" $((max_ascii_length - ${#ascii_art[$i]} + 4)) "" # 4 spaces padding
    if [ -n "${info[$i]}" ]; then
        echo -e "${info[$i]}"
    else
        echo
    fi
done

# Print remaining info lines
for ((i=${#ascii_art[@]}; i<${#info[@]}; i++)); do
    printf "%*s" "$max_ascii_length" ""
    printf "    " # 4 spaces padding
    echo -e "${info[$i]}"
done


echo -e '';
